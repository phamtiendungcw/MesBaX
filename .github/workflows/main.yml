name: Full Solution CI with SonarQube

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Cache .NET dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Backend
        run: dotnet build --no-restore

      - name: Test Backend
        run: dotnet test --no-build --verbosity normal
    
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ./src/MBX.UI/node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('./src/MBX.UI/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
      - name: Install dependencies
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm install
        working-directory: ./src/MBX.UI

      - name: Install Angular CLI
        run: npm install -g @angular/cli@16.2.16
        working-directory: ./src/MBX.UI

      - name: Install Husky
        run: npm install husky --save-dev
        working-directory: ./src/MBX.UI

      - name: Test Angular application
        run: npm run test -- --watch=false --browsers=ChromeHeadless
        working-directory: ./src/MBX.UI

      - name: Build Angular application
        run: ng build --configuration production --output-path docs --base-href /mesbax-ui/
        working-directory: ./src/MBX.UI
    
      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./src/MBX.UI/docs

  sonar-analysis:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend] # Chạy sau khi build backend và frontend thành công
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x' # Thay đổi phiên bản .NET nếu cần

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"phamtiendungcw_MesBaX" /o:"phamtiendungcw" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build # build lại để chắc chắn rằng code được phân tích
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  deploy:
    needs: [build-frontend]
    permissions:
      pages: write
      id-token: write
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
